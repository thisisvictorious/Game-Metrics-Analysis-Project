{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <center>Проект: Вариант 1</center>\n",
    "**<center>Представьте, что вы работаете в компании, которая разрабатывает мобильные игры. К вам пришел менеджер с рядом задач по исследованию нескольких аспектов мобильного приложения:</center>**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <center>Задание 1</center>                                                      \n",
    "**<center>Retention – один из самых важных показателей в компании. Ваша задача – написать функцию, которая будет считать retention игроков (по дням от даты регистрации игрока).<center>**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Проверка на дубликаты в reg_data:\n",
      "Количество дубликатов в reg_data: 0\n",
      "\n",
      "Первые 5 строк датасета reg_data:\n",
      "      reg_ts  uid\n",
      "0  911382223    1\n",
      "1  932683089    2\n",
      "2  947802447    3\n",
      "3  959523541    4\n",
      "4  969103313    5\n",
      "\n",
      "Информация о датасете reg_data:\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1000000 entries, 0 to 999999\n",
      "Data columns (total 2 columns):\n",
      " #   Column  Non-Null Count    Dtype\n",
      "---  ------  --------------    -----\n",
      " 0   reg_ts  1000000 non-null  int64\n",
      " 1   uid     1000000 non-null  int64\n",
      "dtypes: int64(2)\n",
      "memory usage: 15.3 MB\n",
      "None\n",
      "\n",
      "Размерность датасета reg_data:\n",
      "(1000000, 2)\n",
      "\n",
      "Названия столбцов в reg_data:\n",
      "Index(['reg_ts', 'uid'], dtype='object')\n",
      "\n",
      "Проверка на дубликаты в auth_data:\n",
      "Количество дубликатов в auth_data: 0\n",
      "\n",
      "Первые 5 строк датасета auth_data:\n",
      "     auth_ts  uid\n",
      "0  911382223    1\n",
      "1  932683089    2\n",
      "2  932921206    2\n",
      "3  933393015    2\n",
      "4  933875379    2\n",
      "\n",
      "Информация о датасете auth_data:\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9601013 entries, 0 to 9601012\n",
      "Data columns (total 2 columns):\n",
      " #   Column   Dtype\n",
      "---  ------   -----\n",
      " 0   auth_ts  int64\n",
      " 1   uid      int64\n",
      "dtypes: int64(2)\n",
      "memory usage: 146.5 MB\n",
      "None\n",
      "\n",
      "Размерность датасета auth_data:\n",
      "(9601013, 2)\n",
      "\n",
      "Названия столбцов в auth_data:\n",
      "Index(['auth_ts', 'uid'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Загрузка данных\n",
    "reg_data = pd.read_csv('/mnt/HC_Volume_18315164/home-jupyter/jupyter-v-ustimova/shared/problem1-reg_data.csv', sep=';')\n",
    "auth_data = pd.read_csv('/mnt/HC_Volume_18315164/home-jupyter/jupyter-v-ustimova/shared/problem1-auth_data.csv', sep=';')\n",
    "\n",
    "# Проверка на дубликаты в reg_data\n",
    "print(\"\\nПроверка на дубликаты в reg_data:\")\n",
    "print(\"Количество дубликатов в reg_data:\", reg_data.duplicated().sum())\n",
    "\n",
    "# Просмотр первых 5 строк датасета reg_data\n",
    "print(\"\\nПервые 5 строк датасета reg_data:\")\n",
    "print(reg_data.head())\n",
    "\n",
    "# Информация о типах данных и количестве непустых значений в reg_data\n",
    "print(\"\\nИнформация о датасете reg_data:\")\n",
    "print(reg_data.info())\n",
    "\n",
    "# Размерность датасета reg_data \n",
    "print(\"\\nРазмерность датасета reg_data:\")\n",
    "print(reg_data.shape)\n",
    "\n",
    "# Названия столбцов в reg_data\n",
    "print(\"\\nНазвания столбцов в reg_data:\")\n",
    "print(reg_data.columns)\n",
    "\n",
    "# Проверка на дубликаты в auth_data\n",
    "print(\"\\nПроверка на дубликаты в auth_data:\")\n",
    "print(\"Количество дубликатов в auth_data:\", auth_data.duplicated().sum())\n",
    "\n",
    "# Просмотр первых 5 строк датасета auth_data\n",
    "print(\"\\nПервые 5 строк датасета auth_data:\")\n",
    "print(auth_data.head())\n",
    "\n",
    "# Информация о типах данных и количестве непустых значений в auth_data\n",
    "print(\"\\nИнформация о датасете auth_data:\")\n",
    "print(auth_data.info())\n",
    "\n",
    "# Размерность датасета auth_data\n",
    "print(\"\\nРазмерность датасета auth_data:\")\n",
    "print(auth_data.shape)\n",
    "\n",
    "# Названия столбцов в auth_data\n",
    "print(\"\\nНазвания столбцов в auth_data:\")\n",
    "print(auth_data.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**<center>Из предоставленной информации видно следующее:<center>**\n",
    "    \n",
    "    Для датасета reg_data:\n",
    "  \n",
    "- Содержит 2 столбца: 'reg_ts' (время регистрации) и 'uid' (идентификатор пользователя).\n",
    "- Всего 1 000 000 записей.\n",
    "- Нет пропущенных значений в данных.\n",
    "- Нет дубликатов данных.\n",
    "- Тип данных для 'reg_ts' и 'uid' - int64.\n",
    "    \n",
    "    Для датасета auth_data:\n",
    "        \n",
    "        \n",
    "        \n",
    "  \n",
    "- Содержит 2 столбца: 'auth_ts' (время захода) и 'uid' (идентификатор пользователя).\n",
    "- Всего 9 601 013 записей.\n",
    "- Нет пропущенных значений в данных.\n",
    "- Нет дубликатов данных.\n",
    "- Тип данных для 'auth_ts' и 'uid' - int64.\n",
    "    \n",
    "    Оба датасета содержат информацию о времени регистрации/захода и идентификаторе пользователя. Датасет auth_data имеет большее количество записей, чем reg_data, что может указывать на то, что у некоторых пользователей есть несколько заходов на платформу, но только одна регистрация. Это может быть связано с тем, что пользователи могут заходить на платформу несколько раз, например, с разных устройств или в разное время, но регистрироваться только один раз. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Количество уникальных идентификаторов пользователей в reg_data: 1000000\n",
      "Количество уникальных идентификаторов пользователей в auth_data: 1000000\n",
      "Общее количество пользователей с временем захода, но без времени регистрации: 0\n"
     ]
    }
   ],
   "source": [
    "# Преобразование дат в формат datetime64\n",
    "reg_data['reg_ts'] = pd.to_datetime(reg_data['reg_ts'], unit='s')\n",
    "reg_data['reg_ts'] = reg_data['reg_ts'].astype('datetime64[D]')\n",
    "auth_data['auth_ts'] = pd.to_datetime(auth_data['auth_ts'], unit='s')\n",
    "auth_data['auth_ts'] = auth_data['auth_ts'].astype('datetime64[D]')\n",
    "\n",
    "# Количество уникальных идентификаторов пользователей\n",
    "unique_uid_reg = reg_data['uid'].nunique()\n",
    "unique_uid_auth = auth_data['uid'].nunique()\n",
    "print(f\"\\nКоличество уникальных идентификаторов пользователей в reg_data: {unique_uid_reg}\")\n",
    "print(f\"Количество уникальных идентификаторов пользователей в auth_data: {unique_uid_auth}\")\n",
    "\n",
    "# Пользователи с временем захода без времени регистрации\n",
    "users_without_registration = auth_data[~auth_data['uid'].isin(reg_data['uid'])]\n",
    "\n",
    "# Общее количество пользователей\n",
    "total_users_without_registration = users_without_registration['uid'].nunique()\n",
    "print(f\"Общее количество пользователей с временем захода, но без времени регистрации: {total_users_without_registration}\")\n",
    "\n",
    "# Преобразование дат в формат datetime64\n",
    "reg_data['reg_ts'] = pd.to_datetime(reg_data['reg_ts'], unit='s')\n",
    "auth_data['auth_ts'] = pd.to_datetime(auth_data['auth_ts'], unit='s')\n",
    "\n",
    "def retention(reg_data, auth_data, start, end):\n",
    "    \n",
    "    \"\"\"\n",
    "    Рассчитывает retention rate пользователей в % на основе данных о времени регистрации и захода в игру.\n",
    "\n",
    "    Параметры:\n",
    "    reg_data (DataFrame): Данные о времени регистрации пользователей.\n",
    "    auth_data (DataFrame): Данные о времени захода пользователей в игру.\n",
    "    start : Начальная дата для анализа retention rate.\n",
    "    end : Конечная дата для анализа retention rate.\n",
    "\n",
    "    Возвращает:\n",
    "    DataFrame: Таблица с retention rate по когортам и дням, исключая нулевой день, а также с добавленным столбцом 'cohort_size',\n",
    "    содержащим размер когорт.\n",
    "    \"\"\"\n",
    "    \n",
    "    reg_data = reg_data[(reg_data['reg_ts'] >= pd.to_datetime(start)) & (reg_data['reg_ts'] <= pd.to_datetime(end))]\n",
    "    auth_data = auth_data[(auth_data['auth_ts'] >= pd.to_datetime(start)) & (auth_data['auth_ts'] <= pd.to_datetime(end))]\n",
    "\n",
    "    merged_data = reg_data.merge(auth_data, on='uid')\n",
    "\n",
    "    merged_data['day_diff'] = (merged_data['auth_ts'] - merged_data['reg_ts']).dt.days\n",
    "\n",
    "    merged_data = merged_data.groupby(['reg_ts', 'day_diff'], as_index=False).agg({'uid': 'nunique'})\n",
    "\n",
    "    pivot_data = merged_data.pivot(index='reg_ts', columns='day_diff', values='uid')\n",
    "\n",
    "    retention = pivot_data.div(pivot_data.iloc[:, 0], axis=0).round(4) * 100\n",
    "    retention = retention.drop(columns=0) \n",
    "\n",
    "    cohort_sizes = pivot_data.iloc[:, 0]\n",
    "    retention['cohort_size'] = cohort_sizes\n",
    "\n",
    "    return retention"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>day_diff</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>cohort_size</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reg_ts</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-09-01</th>\n",
       "      <td>2.02</td>\n",
       "      <td>4.10</td>\n",
       "      <td>4.22</td>\n",
       "      <td>4.60</td>\n",
       "      <td>6.43</td>\n",
       "      <td>5.61</td>\n",
       "      <td>6.43</td>\n",
       "      <td>1586.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-02</th>\n",
       "      <td>2.52</td>\n",
       "      <td>3.90</td>\n",
       "      <td>4.66</td>\n",
       "      <td>5.67</td>\n",
       "      <td>6.23</td>\n",
       "      <td>7.12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1588.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-03</th>\n",
       "      <td>2.33</td>\n",
       "      <td>5.41</td>\n",
       "      <td>4.71</td>\n",
       "      <td>6.54</td>\n",
       "      <td>6.98</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1591.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-04</th>\n",
       "      <td>2.01</td>\n",
       "      <td>3.64</td>\n",
       "      <td>3.64</td>\n",
       "      <td>5.15</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1593.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-05</th>\n",
       "      <td>2.76</td>\n",
       "      <td>3.95</td>\n",
       "      <td>4.64</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1596.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-06</th>\n",
       "      <td>3.13</td>\n",
       "      <td>4.32</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1599.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-07</th>\n",
       "      <td>2.94</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1601.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-08</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1604.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "day_diff       1     2     3     4     5     6     7  cohort_size\n",
       "reg_ts                                                           \n",
       "2020-09-01  2.02  4.10  4.22  4.60  6.43  5.61  6.43       1586.0\n",
       "2020-09-02  2.52  3.90  4.66  5.67  6.23  7.12   NaN       1588.0\n",
       "2020-09-03  2.33  5.41  4.71  6.54  6.98   NaN   NaN       1591.0\n",
       "2020-09-04  2.01  3.64  3.64  5.15   NaN   NaN   NaN       1593.0\n",
       "2020-09-05  2.76  3.95  4.64   NaN   NaN   NaN   NaN       1596.0\n",
       "2020-09-06  3.13  4.32   NaN   NaN   NaN   NaN   NaN       1599.0\n",
       "2020-09-07  2.94   NaN   NaN   NaN   NaN   NaN   NaN       1601.0\n",
       "2020-09-08   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1604.0"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Проверка функции № 1\n",
    "\n",
    "retention(reg_data, auth_data, '2020-09-01', '2020-09-08')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>day_diff</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>...</th>\n",
       "      <th>22</th>\n",
       "      <th>23</th>\n",
       "      <th>24</th>\n",
       "      <th>25</th>\n",
       "      <th>26</th>\n",
       "      <th>27</th>\n",
       "      <th>28</th>\n",
       "      <th>29</th>\n",
       "      <th>30</th>\n",
       "      <th>cohort_size</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>reg_ts</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-08-01</th>\n",
       "      <td>1.92</td>\n",
       "      <td>4.45</td>\n",
       "      <td>4.31</td>\n",
       "      <td>5.57</td>\n",
       "      <td>5.91</td>\n",
       "      <td>7.63</td>\n",
       "      <td>6.37</td>\n",
       "      <td>4.51</td>\n",
       "      <td>6.37</td>\n",
       "      <td>4.78</td>\n",
       "      <td>...</td>\n",
       "      <td>4.05</td>\n",
       "      <td>3.78</td>\n",
       "      <td>4.18</td>\n",
       "      <td>4.11</td>\n",
       "      <td>2.52</td>\n",
       "      <td>3.12</td>\n",
       "      <td>3.19</td>\n",
       "      <td>3.05</td>\n",
       "      <td>2.72</td>\n",
       "      <td>1507.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-02</th>\n",
       "      <td>2.58</td>\n",
       "      <td>4.04</td>\n",
       "      <td>4.37</td>\n",
       "      <td>5.17</td>\n",
       "      <td>6.49</td>\n",
       "      <td>6.63</td>\n",
       "      <td>6.03</td>\n",
       "      <td>4.51</td>\n",
       "      <td>5.30</td>\n",
       "      <td>5.50</td>\n",
       "      <td>...</td>\n",
       "      <td>3.84</td>\n",
       "      <td>3.91</td>\n",
       "      <td>3.98</td>\n",
       "      <td>3.25</td>\n",
       "      <td>3.38</td>\n",
       "      <td>2.98</td>\n",
       "      <td>3.38</td>\n",
       "      <td>3.31</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1509.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-03</th>\n",
       "      <td>1.72</td>\n",
       "      <td>4.30</td>\n",
       "      <td>4.03</td>\n",
       "      <td>5.56</td>\n",
       "      <td>6.15</td>\n",
       "      <td>7.54</td>\n",
       "      <td>5.29</td>\n",
       "      <td>4.96</td>\n",
       "      <td>4.89</td>\n",
       "      <td>5.36</td>\n",
       "      <td>...</td>\n",
       "      <td>4.37</td>\n",
       "      <td>2.98</td>\n",
       "      <td>3.90</td>\n",
       "      <td>3.17</td>\n",
       "      <td>4.37</td>\n",
       "      <td>3.37</td>\n",
       "      <td>3.24</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1512.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-04</th>\n",
       "      <td>2.05</td>\n",
       "      <td>3.57</td>\n",
       "      <td>4.69</td>\n",
       "      <td>5.22</td>\n",
       "      <td>5.28</td>\n",
       "      <td>6.47</td>\n",
       "      <td>5.15</td>\n",
       "      <td>4.43</td>\n",
       "      <td>4.69</td>\n",
       "      <td>5.28</td>\n",
       "      <td>...</td>\n",
       "      <td>3.04</td>\n",
       "      <td>4.43</td>\n",
       "      <td>2.91</td>\n",
       "      <td>3.17</td>\n",
       "      <td>2.97</td>\n",
       "      <td>3.17</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1514.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-05</th>\n",
       "      <td>2.57</td>\n",
       "      <td>3.49</td>\n",
       "      <td>4.02</td>\n",
       "      <td>5.74</td>\n",
       "      <td>5.08</td>\n",
       "      <td>7.78</td>\n",
       "      <td>6.13</td>\n",
       "      <td>4.22</td>\n",
       "      <td>4.75</td>\n",
       "      <td>4.75</td>\n",
       "      <td>...</td>\n",
       "      <td>3.30</td>\n",
       "      <td>3.30</td>\n",
       "      <td>3.76</td>\n",
       "      <td>2.97</td>\n",
       "      <td>3.56</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1517.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-06</th>\n",
       "      <td>1.71</td>\n",
       "      <td>5.07</td>\n",
       "      <td>5.73</td>\n",
       "      <td>5.60</td>\n",
       "      <td>5.73</td>\n",
       "      <td>7.50</td>\n",
       "      <td>6.06</td>\n",
       "      <td>5.00</td>\n",
       "      <td>5.79</td>\n",
       "      <td>5.13</td>\n",
       "      <td>...</td>\n",
       "      <td>3.88</td>\n",
       "      <td>3.36</td>\n",
       "      <td>3.82</td>\n",
       "      <td>3.09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1519.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-07</th>\n",
       "      <td>2.17</td>\n",
       "      <td>3.09</td>\n",
       "      <td>5.26</td>\n",
       "      <td>5.32</td>\n",
       "      <td>5.98</td>\n",
       "      <td>7.16</td>\n",
       "      <td>6.18</td>\n",
       "      <td>5.12</td>\n",
       "      <td>4.99</td>\n",
       "      <td>4.93</td>\n",
       "      <td>...</td>\n",
       "      <td>3.09</td>\n",
       "      <td>3.81</td>\n",
       "      <td>3.88</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1522.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-08</th>\n",
       "      <td>2.43</td>\n",
       "      <td>4.79</td>\n",
       "      <td>4.20</td>\n",
       "      <td>5.45</td>\n",
       "      <td>5.45</td>\n",
       "      <td>7.22</td>\n",
       "      <td>6.30</td>\n",
       "      <td>3.94</td>\n",
       "      <td>4.79</td>\n",
       "      <td>5.25</td>\n",
       "      <td>...</td>\n",
       "      <td>4.33</td>\n",
       "      <td>3.35</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1524.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-09</th>\n",
       "      <td>2.10</td>\n",
       "      <td>3.93</td>\n",
       "      <td>4.65</td>\n",
       "      <td>5.37</td>\n",
       "      <td>7.07</td>\n",
       "      <td>6.29</td>\n",
       "      <td>6.61</td>\n",
       "      <td>4.45</td>\n",
       "      <td>4.91</td>\n",
       "      <td>4.45</td>\n",
       "      <td>...</td>\n",
       "      <td>4.13</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1527.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-10</th>\n",
       "      <td>2.16</td>\n",
       "      <td>3.14</td>\n",
       "      <td>5.49</td>\n",
       "      <td>5.89</td>\n",
       "      <td>6.28</td>\n",
       "      <td>6.47</td>\n",
       "      <td>6.08</td>\n",
       "      <td>5.04</td>\n",
       "      <td>4.91</td>\n",
       "      <td>5.76</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1529.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-11</th>\n",
       "      <td>1.89</td>\n",
       "      <td>4.31</td>\n",
       "      <td>4.57</td>\n",
       "      <td>5.94</td>\n",
       "      <td>6.33</td>\n",
       "      <td>8.55</td>\n",
       "      <td>6.33</td>\n",
       "      <td>5.29</td>\n",
       "      <td>6.40</td>\n",
       "      <td>5.87</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1532.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-12</th>\n",
       "      <td>2.22</td>\n",
       "      <td>3.65</td>\n",
       "      <td>3.39</td>\n",
       "      <td>3.98</td>\n",
       "      <td>5.02</td>\n",
       "      <td>5.67</td>\n",
       "      <td>5.08</td>\n",
       "      <td>3.78</td>\n",
       "      <td>3.85</td>\n",
       "      <td>5.02</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1534.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-13</th>\n",
       "      <td>1.69</td>\n",
       "      <td>3.71</td>\n",
       "      <td>5.14</td>\n",
       "      <td>5.34</td>\n",
       "      <td>6.38</td>\n",
       "      <td>5.73</td>\n",
       "      <td>5.66</td>\n",
       "      <td>5.92</td>\n",
       "      <td>4.68</td>\n",
       "      <td>5.47</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1537.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-14</th>\n",
       "      <td>1.30</td>\n",
       "      <td>4.22</td>\n",
       "      <td>4.09</td>\n",
       "      <td>6.24</td>\n",
       "      <td>6.56</td>\n",
       "      <td>5.91</td>\n",
       "      <td>5.85</td>\n",
       "      <td>4.94</td>\n",
       "      <td>4.94</td>\n",
       "      <td>4.22</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1539.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-15</th>\n",
       "      <td>1.88</td>\n",
       "      <td>4.22</td>\n",
       "      <td>4.60</td>\n",
       "      <td>5.64</td>\n",
       "      <td>5.90</td>\n",
       "      <td>7.65</td>\n",
       "      <td>5.84</td>\n",
       "      <td>5.32</td>\n",
       "      <td>4.35</td>\n",
       "      <td>5.58</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1542.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-16</th>\n",
       "      <td>1.88</td>\n",
       "      <td>3.11</td>\n",
       "      <td>4.08</td>\n",
       "      <td>5.57</td>\n",
       "      <td>5.44</td>\n",
       "      <td>6.73</td>\n",
       "      <td>5.05</td>\n",
       "      <td>3.75</td>\n",
       "      <td>5.76</td>\n",
       "      <td>4.85</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1545.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-17</th>\n",
       "      <td>2.33</td>\n",
       "      <td>4.07</td>\n",
       "      <td>4.14</td>\n",
       "      <td>4.98</td>\n",
       "      <td>5.69</td>\n",
       "      <td>6.46</td>\n",
       "      <td>5.56</td>\n",
       "      <td>4.27</td>\n",
       "      <td>4.59</td>\n",
       "      <td>5.30</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1547.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-18</th>\n",
       "      <td>1.94</td>\n",
       "      <td>4.45</td>\n",
       "      <td>4.26</td>\n",
       "      <td>5.10</td>\n",
       "      <td>6.26</td>\n",
       "      <td>6.20</td>\n",
       "      <td>6.07</td>\n",
       "      <td>4.97</td>\n",
       "      <td>5.75</td>\n",
       "      <td>4.65</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1549.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-19</th>\n",
       "      <td>2.38</td>\n",
       "      <td>4.45</td>\n",
       "      <td>5.35</td>\n",
       "      <td>5.73</td>\n",
       "      <td>6.25</td>\n",
       "      <td>7.73</td>\n",
       "      <td>6.89</td>\n",
       "      <td>5.48</td>\n",
       "      <td>5.54</td>\n",
       "      <td>5.41</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1552.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-20</th>\n",
       "      <td>2.06</td>\n",
       "      <td>4.57</td>\n",
       "      <td>5.59</td>\n",
       "      <td>5.40</td>\n",
       "      <td>6.30</td>\n",
       "      <td>7.78</td>\n",
       "      <td>7.01</td>\n",
       "      <td>5.59</td>\n",
       "      <td>5.34</td>\n",
       "      <td>5.08</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1555.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-21</th>\n",
       "      <td>1.80</td>\n",
       "      <td>4.37</td>\n",
       "      <td>4.88</td>\n",
       "      <td>4.56</td>\n",
       "      <td>6.17</td>\n",
       "      <td>7.13</td>\n",
       "      <td>6.55</td>\n",
       "      <td>4.50</td>\n",
       "      <td>5.27</td>\n",
       "      <td>5.20</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1557.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-22</th>\n",
       "      <td>2.37</td>\n",
       "      <td>4.49</td>\n",
       "      <td>4.68</td>\n",
       "      <td>5.45</td>\n",
       "      <td>6.03</td>\n",
       "      <td>7.18</td>\n",
       "      <td>6.35</td>\n",
       "      <td>5.06</td>\n",
       "      <td>4.68</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1560.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-23</th>\n",
       "      <td>2.50</td>\n",
       "      <td>3.84</td>\n",
       "      <td>4.87</td>\n",
       "      <td>4.93</td>\n",
       "      <td>6.98</td>\n",
       "      <td>8.19</td>\n",
       "      <td>5.70</td>\n",
       "      <td>5.12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1562.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-24</th>\n",
       "      <td>1.79</td>\n",
       "      <td>4.15</td>\n",
       "      <td>4.28</td>\n",
       "      <td>5.11</td>\n",
       "      <td>5.75</td>\n",
       "      <td>7.60</td>\n",
       "      <td>6.01</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1565.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-25</th>\n",
       "      <td>1.98</td>\n",
       "      <td>4.40</td>\n",
       "      <td>4.79</td>\n",
       "      <td>5.68</td>\n",
       "      <td>5.30</td>\n",
       "      <td>5.30</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1567.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-26</th>\n",
       "      <td>1.46</td>\n",
       "      <td>3.44</td>\n",
       "      <td>4.20</td>\n",
       "      <td>4.52</td>\n",
       "      <td>6.43</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1570.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-27</th>\n",
       "      <td>1.65</td>\n",
       "      <td>3.37</td>\n",
       "      <td>4.77</td>\n",
       "      <td>5.21</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1573.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-28</th>\n",
       "      <td>2.03</td>\n",
       "      <td>4.57</td>\n",
       "      <td>5.27</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1575.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-29</th>\n",
       "      <td>2.53</td>\n",
       "      <td>3.74</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1578.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-30</th>\n",
       "      <td>1.84</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1580.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-31</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1583.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>31 rows × 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "day_diff       1     2     3     4     5     6     7     8     9    10  ...  \\\n",
       "reg_ts                                                                  ...   \n",
       "2020-08-01  1.92  4.45  4.31  5.57  5.91  7.63  6.37  4.51  6.37  4.78  ...   \n",
       "2020-08-02  2.58  4.04  4.37  5.17  6.49  6.63  6.03  4.51  5.30  5.50  ...   \n",
       "2020-08-03  1.72  4.30  4.03  5.56  6.15  7.54  5.29  4.96  4.89  5.36  ...   \n",
       "2020-08-04  2.05  3.57  4.69  5.22  5.28  6.47  5.15  4.43  4.69  5.28  ...   \n",
       "2020-08-05  2.57  3.49  4.02  5.74  5.08  7.78  6.13  4.22  4.75  4.75  ...   \n",
       "2020-08-06  1.71  5.07  5.73  5.60  5.73  7.50  6.06  5.00  5.79  5.13  ...   \n",
       "2020-08-07  2.17  3.09  5.26  5.32  5.98  7.16  6.18  5.12  4.99  4.93  ...   \n",
       "2020-08-08  2.43  4.79  4.20  5.45  5.45  7.22  6.30  3.94  4.79  5.25  ...   \n",
       "2020-08-09  2.10  3.93  4.65  5.37  7.07  6.29  6.61  4.45  4.91  4.45  ...   \n",
       "2020-08-10  2.16  3.14  5.49  5.89  6.28  6.47  6.08  5.04  4.91  5.76  ...   \n",
       "2020-08-11  1.89  4.31  4.57  5.94  6.33  8.55  6.33  5.29  6.40  5.87  ...   \n",
       "2020-08-12  2.22  3.65  3.39  3.98  5.02  5.67  5.08  3.78  3.85  5.02  ...   \n",
       "2020-08-13  1.69  3.71  5.14  5.34  6.38  5.73  5.66  5.92  4.68  5.47  ...   \n",
       "2020-08-14  1.30  4.22  4.09  6.24  6.56  5.91  5.85  4.94  4.94  4.22  ...   \n",
       "2020-08-15  1.88  4.22  4.60  5.64  5.90  7.65  5.84  5.32  4.35  5.58  ...   \n",
       "2020-08-16  1.88  3.11  4.08  5.57  5.44  6.73  5.05  3.75  5.76  4.85  ...   \n",
       "2020-08-17  2.33  4.07  4.14  4.98  5.69  6.46  5.56  4.27  4.59  5.30  ...   \n",
       "2020-08-18  1.94  4.45  4.26  5.10  6.26  6.20  6.07  4.97  5.75  4.65  ...   \n",
       "2020-08-19  2.38  4.45  5.35  5.73  6.25  7.73  6.89  5.48  5.54  5.41  ...   \n",
       "2020-08-20  2.06  4.57  5.59  5.40  6.30  7.78  7.01  5.59  5.34  5.08  ...   \n",
       "2020-08-21  1.80  4.37  4.88  4.56  6.17  7.13  6.55  4.50  5.27  5.20  ...   \n",
       "2020-08-22  2.37  4.49  4.68  5.45  6.03  7.18  6.35  5.06  4.68   NaN  ...   \n",
       "2020-08-23  2.50  3.84  4.87  4.93  6.98  8.19  5.70  5.12   NaN   NaN  ...   \n",
       "2020-08-24  1.79  4.15  4.28  5.11  5.75  7.60  6.01   NaN   NaN   NaN  ...   \n",
       "2020-08-25  1.98  4.40  4.79  5.68  5.30  5.30   NaN   NaN   NaN   NaN  ...   \n",
       "2020-08-26  1.46  3.44  4.20  4.52  6.43   NaN   NaN   NaN   NaN   NaN  ...   \n",
       "2020-08-27  1.65  3.37  4.77  5.21   NaN   NaN   NaN   NaN   NaN   NaN  ...   \n",
       "2020-08-28  2.03  4.57  5.27   NaN   NaN   NaN   NaN   NaN   NaN   NaN  ...   \n",
       "2020-08-29  2.53  3.74   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN  ...   \n",
       "2020-08-30  1.84   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN  ...   \n",
       "2020-08-31   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN  ...   \n",
       "\n",
       "day_diff      22    23    24    25    26    27    28    29    30  cohort_size  \n",
       "reg_ts                                                                         \n",
       "2020-08-01  4.05  3.78  4.18  4.11  2.52  3.12  3.19  3.05  2.72       1507.0  \n",
       "2020-08-02  3.84  3.91  3.98  3.25  3.38  2.98  3.38  3.31   NaN       1509.0  \n",
       "2020-08-03  4.37  2.98  3.90  3.17  4.37  3.37  3.24   NaN   NaN       1512.0  \n",
       "2020-08-04  3.04  4.43  2.91  3.17  2.97  3.17   NaN   NaN   NaN       1514.0  \n",
       "2020-08-05  3.30  3.30  3.76  2.97  3.56   NaN   NaN   NaN   NaN       1517.0  \n",
       "2020-08-06  3.88  3.36  3.82  3.09   NaN   NaN   NaN   NaN   NaN       1519.0  \n",
       "2020-08-07  3.09  3.81  3.88   NaN   NaN   NaN   NaN   NaN   NaN       1522.0  \n",
       "2020-08-08  4.33  3.35   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1524.0  \n",
       "2020-08-09  4.13   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1527.0  \n",
       "2020-08-10   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1529.0  \n",
       "2020-08-11   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1532.0  \n",
       "2020-08-12   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1534.0  \n",
       "2020-08-13   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1537.0  \n",
       "2020-08-14   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1539.0  \n",
       "2020-08-15   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1542.0  \n",
       "2020-08-16   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1545.0  \n",
       "2020-08-17   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1547.0  \n",
       "2020-08-18   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1549.0  \n",
       "2020-08-19   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1552.0  \n",
       "2020-08-20   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1555.0  \n",
       "2020-08-21   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1557.0  \n",
       "2020-08-22   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1560.0  \n",
       "2020-08-23   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1562.0  \n",
       "2020-08-24   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1565.0  \n",
       "2020-08-25   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1567.0  \n",
       "2020-08-26   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1570.0  \n",
       "2020-08-27   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1573.0  \n",
       "2020-08-28   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1575.0  \n",
       "2020-08-29   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1578.0  \n",
       "2020-08-30   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1580.0  \n",
       "2020-08-31   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN       1583.0  \n",
       "\n",
       "[31 rows x 31 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Проверка функции № 2\n",
    "\n",
    "retention(reg_data, auth_data, '2020-08-01', '2020-08-31')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <center>Задание 2<center>\n",
    "**<center>Имеются результаты A/B теста, в котором двум группам пользователей предлагались различные наборы акционных предложений. Известно, что ARPU в тестовой группе выше на 5%, чем в контрольной. При этом в контрольной группе 1928 игроков из 202103 оказались платящими, а в тестовой – 1805 из 202667.**<center>\n",
    "\n",
    "**<center>Какие метрики стоит проанализировать для принятия правильного решения и как?<center>**\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   user_id  revenue testgroup\n",
      "0        1        0         b\n",
      "1        2        0         a\n",
      "2        3        0         a\n",
      "3        4        0         b\n",
      "4        5        0         b\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 404770 entries, 0 to 404769\n",
      "Data columns (total 3 columns):\n",
      " #   Column     Non-Null Count   Dtype \n",
      "---  ------     --------------   ----- \n",
      " 0   user_id    404770 non-null  int64 \n",
      " 1   revenue    404770 non-null  int64 \n",
      " 2   testgroup  404770 non-null  object\n",
      "dtypes: int64(2), object(1)\n",
      "memory usage: 9.3+ MB\n",
      "None\n",
      "             user_id        revenue\n",
      "count  404770.000000  404770.000000\n",
      "mean   202385.500000      26.083435\n",
      "std    116847.178567     681.652928\n",
      "min         1.000000       0.000000\n",
      "25%    101193.250000       0.000000\n",
      "50%    202385.500000       0.000000\n",
      "75%    303577.750000       0.000000\n",
      "max    404770.000000   37433.000000\n",
      "user_id      0\n",
      "revenue      0\n",
      "testgroup    0\n",
      "dtype: int64\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Загрузка данных\n",
    "data = pd.read_csv('/mnt/HC_Volume_18315164/home-jupyter/jupyter-v-ustimova/shared/problem2.csv', sep=';')\n",
    "\n",
    "# Просмотр первых строк данных для оценки структуры\n",
    "print(data.head())\n",
    "\n",
    "# Информация о данных (типы столбцов, пропущенные значения и т.д.)\n",
    "print(data.info())\n",
    "\n",
    "# Описательная статистика числовых столбцов\n",
    "print(data.describe())\n",
    "\n",
    "# Проверка наличия пропущенных значений в данных\n",
    "print(data.isnull().sum())\n",
    "\n",
    "# Проверка наличия дубликатов\n",
    "print(data.duplicated().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**<center>Из предоставленной информации видно следующее:<center>**\n",
    "    \n",
    "1. Данные содержат 404770 записей и 3 столбца: 'user_id', 'revenue' и 'testgroup'.\n",
    "2. Типы данных: 'user_id' и 'revenue' - целочисленные (int64), 'testgroup' - объект (object).\n",
    "3. Столбец 'revenue' имеет среднее значение 26.08, стандартное отклонение 681.65, минимальное значение 0 и максимальное значение 37433. Большинство значений (75%) равны 0.\n",
    "4. Пропущенных значений в данных нет.\n",
    "5. Дубликатов в данных также не обнаружено."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Создание гистограммы для столбца 'revenue'\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(data['revenue'], bins=50, color='skyblue', edgecolor='black')\n",
    "plt.title('Распределение значений в столбце revenue')\n",
    "plt.xlabel('Выручка')\n",
    "plt.ylabel('Частота')\n",
    "plt.grid(axis='y', alpha=0.75)\n",
    "plt.show()\n",
    "\n",
    "# Фильтрация данных для группы 'a'\n",
    "data_group_a = data[data['testgroup'] == 'a']\n",
    "\n",
    "# Создание гистограммы для группы 'a'\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(data_group_a['revenue'], bins=50, color='skyblue', edgecolor='black')\n",
    "plt.title('Распределение значений в столбце revenue для группы A')\n",
    "plt.xlabel('Выручка')\n",
    "plt.ylabel('Частота')\n",
    "plt.grid(axis='y', alpha=0.75)\n",
    "plt.show()\n",
    "\n",
    "# Фильтрация данных для группы 'b'\n",
    "data_group_b = data[data['testgroup'] == 'b']\n",
    "\n",
    "# Создание гистограммы для группы 'b'\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(data_group_b['revenue'], bins=50, color='salmon', edgecolor='black')\n",
    "plt.title('Распределение значений в столбце revenue для группы B')\n",
    "plt.xlabel('Выручка')\n",
    "plt.ylabel('Частота')\n",
    "plt.grid(axis='y', alpha=0.75)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Фильтрация данных для группы 'a' с revenue != 0\n",
    "data_group_a_nonzero = data[(data['testgroup'] == 'a') & (data['revenue'] != 0)]\n",
    "\n",
    "# Создание гистограммы для группы 'a' с revenue != 0\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(data_group_a_nonzero['revenue'], bins=50, color='skyblue', edgecolor='black')\n",
    "plt.title('Распределение значений в столбце revenue для группы A (revenue != 0)')\n",
    "plt.xlabel('Выручка')\n",
    "plt.ylabel('Частота')\n",
    "plt.grid(axis='y', alpha=0.75)\n",
    "plt.show()\n",
    "\n",
    "# Фильтрация данных для группы 'b' с revenue != 0\n",
    "data_group_b_nonzero = data[(data['testgroup'] == 'b') & (data['revenue'] != 0)]\n",
    "\n",
    "# Создание гистограммы для группы 'b' с revenue != 0\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(data_group_b_nonzero['revenue'], bins=50, color='salmon', edgecolor='black')\n",
    "plt.title('Распределение значений в столбце revenue для группы B (revenue != 0)')\n",
    "plt.xlabel('Выручка')\n",
    "plt.ylabel('Частота')\n",
    "plt.grid(axis='y', alpha=0.75)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**<center>Исходя из представленных гистограмм видно следующее:<center>**\n",
    "\n",
    "На гистограмме тестовой группы с revenue != 0 данные распределены более равномерно, однако, вероятнее всего, распределения не явлются нормальными, так как имются выбросы данных."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**<center>Для определения лучшего набора предложений (A или B) можно проанализировать следующие метрики:<center>**\n",
    "    \n",
    "\n",
    "1. ARPU  - средний доход с пользователя. \n",
    "    \n",
    "2. ARPPU - показывает средний доход, который приносит каждый платящий пользователь.\n",
    "    \n",
    "3. Conversion Rate - процентное соотношение между количеством пользователей, совершивших целевое действие (конверсию), и общим количеством пользователей, которые могли совершить это действие."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  testgroup  user_id\n",
      "0         a   202103\n",
      "1         b   202667\n",
      "  testgroup  user_id\n",
      "0         a     1928\n",
      "1         b     1805\n"
     ]
    }
   ],
   "source": [
    "# Проверка условия (в контрольной группе 1928 игроков из 202103 оказались платящими, а в тестовой – 1805 из 202667.)\n",
    "df_for_chek_1 = data.groupby('testgroup', as_index=False).agg({'user_id': 'count'})\n",
    "\n",
    "# Результат \n",
    "print(df_for_chek_1)\n",
    "\n",
    "df_for_chek_2 = data.query('revenue != 0').groupby('testgroup', as_index=False).agg({'user_id': 'count'})\n",
    "\n",
    "# Результат\n",
    "print(df_for_chek_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Метрики для контрольной и тестовой групп:\n",
      "ARPU:\n",
      "testgroup\n",
      "a    25.413720\n",
      "b    26.751287\n",
      "dtype: float64\n",
      "\n",
      "ARPPU:\n",
      "testgroup\n",
      "a    2663.998444\n",
      "b    3003.658172\n",
      "Name: revenue, dtype: float64\n",
      "\n",
      "Conversion Rate:\n",
      "testgroup\n",
      "a    0.009540\n",
      "b    0.008906\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Группировка данных по testgroup\n",
    "grouped_data = data.groupby('testgroup')\n",
    "\n",
    "# Подсчет количества платящих пользователей в каждой группе\n",
    "paying_users = grouped_data['revenue'].apply(lambda x: (x > 0).sum())\n",
    "\n",
    "# Подсчет общего количества пользователей в каждой группе\n",
    "total_users = grouped_data['user_id'].nunique()\n",
    "\n",
    "# Подсчет ARPU в каждой группе\n",
    "arpu = grouped_data['revenue'].sum() / total_users\n",
    "\n",
    "# Подсчет ARPPU в каждой группе\n",
    "arppu = grouped_data['revenue'].sum() / paying_users\n",
    "\n",
    "# Подсчет Conversion Rate в каждой группе\n",
    "conversion_rate = paying_users / total_users\n",
    "\n",
    "# Вывод результатов\n",
    "print(\"\\nМетрики для контрольной и тестовой групп:\")\n",
    "print(\"ARPU:\")\n",
    "print(arpu)\n",
    "print(\"\\nARPPU:\")\n",
    "print(arppu)\n",
    "print(\"\\nConversion Rate:\")\n",
    "print(conversion_rate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x1080 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "groups = ['a', 'b']\n",
    "\n",
    "# Создание списка значений метрик для Conversion Rate, ARPU и ARPPU\n",
    "conversion_rate_values = [conversion_rate.loc['a'], conversion_rate.loc['b']]\n",
    "arpu_values = [arpu.loc['a'], arpu.loc['b']]\n",
    "arppu_values = [arppu.loc['a'], arppu.loc['b']]\n",
    "\n",
    "# Построение столбчатых диаграмм для каждой метрики\n",
    "fig, ax = plt.subplots(3, 1, figsize=(10, 15))\n",
    "\n",
    "# Увеличение расстояния между диаграммами\n",
    "plt.subplots_adjust(hspace=10000)\n",
    "\n",
    "# Диаграмма для Conversion Rate\n",
    "ax[0].bar(groups, conversion_rate_values, color=['skyblue', 'salmon'])\n",
    "ax[0].set_title('Conversion Rate', fontweight='bold', color='#333333')\n",
    "ax[0].set_ylabel('Значение')\n",
    "ax[0].set_xlabel('Группа')\n",
    "\n",
    "# Диаграмма для ARPU\n",
    "ax[1].bar(groups, arpu_values, color=['skyblue', 'salmon'])\n",
    "ax[1].set_title('ARPU', fontweight='bold', color='#333333')\n",
    "ax[1].set_ylabel('Значение')\n",
    "ax[1].set_xlabel('Группа')\n",
    "\n",
    "# Диаграмма для ARPPU\n",
    "ax[2].bar(groups, arppu_values, color=['skyblue', 'salmon'])\n",
    "ax[2].set_title('ARPPU', fontweight='bold', color='#333333')\n",
    "ax[2].set_ylabel('Значение')\n",
    "ax[2].set_xlabel('Группа')\n",
    "\n",
    "# Сдвиг названия оси Y дальше от шкалы\n",
    "for axis in ax:\n",
    "    axis.yaxis.set_label_coords(-0.07, 0.5)\n",
    "    \n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**<center>Проанализируем предоставленные метрики для контрольной (группа \"a\") и тестовой (группа \"b\") групп:<center>**\n",
    "1. ARPU (Average Revenue Per User) - группа \"b\" имеет более высокий ARPU, что может указывать на то, что пользователи из этой группы в среднем приносят больше выручки компании.\n",
    "\n",
    "2. ARPPU (Average Revenue Per Paying User) - группа \"b\" также имеет более высокий ARPPU, что может означать, что платящие пользователи из этой группы тратят больше денег на покупки.\n",
    "\n",
    "3. Conversion Rate - группа \"a\" имеет более высокий Conversion Rate, что может указывать на более эффективную конверсию пользователей в целевые действия.\n",
    "\n",
    "Исходя из анализа метрик, можно сделать вывод, что группа \"b\" имеет более высокие показатели ARPU, ARPPU, что может указывать на более успешные результаты в плане доходности. Однако, группа \"a\" имеет более высокий Conversion Rate, что может говорить о более эффективной конверсии пользователей. Далее необходимо убедиться, что различия статистически значимы (для этого проведем A/B тестирование). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "        \n",
    "        \n",
    "**<center>Для начала проведем Тест Шапиро-Уилка - это статистический тест, который используется для проверки гипотезы о нормальном распределении данных.<center>**\n",
    "    \n",
    "        Гипотезы, которые будем проверять:\n",
    "Нулевые гипотезы (H0):\n",
    "Данные группы a распределены нормально.\n",
    "Данные группы b распределены нормально. \n",
    "    \n",
    "Альтернативные гипотезы (H1):\n",
    "Данные группы a не распределены нормально.\n",
    "Данные группы b не распределены нормально. \n",
    "    \n",
    "**<center>Далее проведем Тест Левена - это статистический тест, который используется для проверки гомогенности дисперсий (равенства дисперсий) между группами.<center>**\n",
    "    \n",
    "        Гипотезы, которые будем проверять:\n",
    "Нулевая гипотеза (H0): \n",
    "Дисперсии данных групп a и b равны. \n",
    "    \n",
    "Альтернативная гипотеза (H1): \n",
    "Дисперсии данных групп a и b не равны.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Тест Шапиро-Уилка для группы a:\n",
      "Статистика теста: 0.008876502513885498\n",
      "p-значение: 0.0\n",
      "Данные группы a не распределены нормально\n",
      "\n",
      "Тест Шапиро-Уилка для группы b:\n",
      "Статистика теста: 0.06588172912597656\n",
      "p-значение: 0.0\n",
      "Данные группы b не распределены нормально\n",
      "\n",
      "Тест Левена для равенства дисперсий:\n",
      "Статистика теста: 0.3896289474701388\n",
      "p-значение: 0.5324948591043842\n",
      "Дисперсии данных равны\n"
     ]
    }
   ],
   "source": [
    "from scipy.stats import shapiro, levene\n",
    "\n",
    "# Разделение данных по группам\n",
    "data_a = data[data['testgroup'] == 'a']['revenue']\n",
    "data_b = data[data['testgroup'] == 'b']['revenue']\n",
    "\n",
    "# Проверка нормальности распределения\n",
    "stat_a, p_a = shapiro(data_a)\n",
    "stat_b, p_b = shapiro(data_b)\n",
    "\n",
    "print('Тест Шапиро-Уилка для группы a:')\n",
    "print('Статистика теста:', stat_a)\n",
    "print('p-значение:', p_a)\n",
    "if p_a > 0.05:\n",
    "    print('Данные группы a распределены нормально')\n",
    "else:\n",
    "    print('Данные группы a не распределены нормально')\n",
    "\n",
    "print('\\nТест Шапиро-Уилка для группы b:')\n",
    "print('Статистика теста:', stat_b)\n",
    "print('p-значение:', p_b)\n",
    "if p_b > 0.05:\n",
    "    print('Данные группы b распределены нормально')\n",
    "else:\n",
    "    print('Данные группы b не распределены нормально')\n",
    "\n",
    "# Проверка равенства дисперсий\n",
    "stat, p = levene(data_a, data_b)\n",
    "print('\\nТест Левена для равенства дисперсий:')\n",
    "print('Статистика теста:', stat)\n",
    "print('p-значение:', p)\n",
    "if p > 0.05:\n",
    "    print('Дисперсии данных равны')\n",
    "else:\n",
    "    print('Дисперсии данных не равны')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "**<center>Исходя из результатов тестов, можно сделать следующие выводы:<center>**\n",
    "    \n",
    "1. Данные для групп a и b не распределены нормально, так как p-значения теста Шапиро-Уилка меньше уровня значимости 0.05.\n",
    "2. Дисперсии данных для групп a и b равны, так как p-значение теста Левена больше уровня значимости 0.05.\n",
    "\n",
    "Исходя из того, что данные не распределены нормально, и дисперсии равны, для сравнения средних рангов между группами a и b можно использовать непараметрический тест Манна-Уитни.\n",
    "\n",
    "                            Гипотезы, которые будут проверяться в тесте Манна-Уитни: \n",
    "1. Нулевая гипотеза (H0): Средние ранги данных в выборках группы a и группы b равны.\n",
    "2. Альтернативная гипотеза (H1): Средние ранги данных в выборках группы а и группы b не равны.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Тест Манна-Уитни для сравнения средних рангов:\n",
      "Статистика теста: 20491259376.0\n",
      "p-значение: 0.06269701316074398\n"
     ]
    }
   ],
   "source": [
    "from scipy.stats import mannwhitneyu\n",
    "\n",
    "# Проведение теста Манна-Уитни для сравнения средних рангов \n",
    "stat, p = mannwhitneyu(data_a, data_b)\n",
    "print('\\nТест Манна-Уитни для сравнения средних рангов:')\n",
    "print('Статистика теста:', stat)\n",
    "print('p-значение:', p)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**<center>Анализ результатов:<center>**\n",
    "    \n",
    "Исходя из результатов теста Манна-Уитни, статистика теста равна 20491259376.0, а p-значение равно 0.0627. Уровень значимости обычно выбирается на уровне 0.05. Поскольку полученное p-значение (0.0627) больше уровня значимости 0.05, нет достаточных оснований отвергнуть нулевую гипотезу о равенстве средних рангов между группами a и b."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Проведем также Бутстрэп-анализ для сравнения средних значений ARPU и APPU между двумя группами данных (группа 'a' и группа 'b). В данном случае бутстрэп-анализ проверяет следующие гипотезы:\n",
    "\n",
    "1. Нулевая гипотеза (H0): Средние значения ARPU и APPU в группе a равны средним значениям ARPU и APPU в группе b.\n",
    "2. Альтернативная гипотеза (H1): Средние значения ARPU и APPU в группе a отличаются от средних значений ARPU и APPU в группе b."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P-значение для ARPU: 0.0\n",
      "Доверительный интервал для ARPU: [-1.33756686 -1.33756686]\n",
      "P-значение для ARPPU: 0.0\n",
      "Доверительный интервал для ARPPU: [-339.65972776 -339.65972776]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from scipy.stats import norm\n",
    "from tqdm import tqdm\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Загрузка данных\n",
    "data = pd.read_csv('/mnt/HC_Volume_18315164/home-jupyter/jupyter-v-ustimova/shared/problem2.csv', sep=';')\n",
    "\n",
    "data_a = data[data['testgroup'] == 'a']['revenue']\n",
    "data_b = data[data['testgroup'] == 'b']['revenue']\n",
    "\n",
    "# Определение функции для бутстрэп-анализа\n",
    "def get_bootstrap(data_a, data_b, num_iterations=1000):\n",
    "    boot_data = []\n",
    "    for i in range(num_iterations):\n",
    "        boot_a = np.random.choice(data_a, size=len(data_a), replace=True)\n",
    "        boot_b = np.random.choice(data_b, size=len(data_b), replace=True)\n",
    "        boot_mean_diff = np.mean(boot_a) - np.mean(boot_b)\n",
    "        boot_data.append(boot_mean_diff)\n",
    "    \n",
    "    p_value = (np.sum(boot_data >= (np.mean(data_a) - np.mean(data_b)) + np.sum(boot_data <= (np.mean(data_b) - np.mean(data_a)))) / num_iterations)\n",
    "    ci = np.percentile(boot_data, [2.5, 97.5])\n",
    "    \n",
    "    return {'boot_data': boot_data, 'p_value': p_value, 'ci': ci}\n",
    "\n",
    "# Группировка данных по testgroup\n",
    "grouped_data = data.groupby('testgroup')\n",
    "\n",
    "# Подсчет количества платящих пользователей в каждой группе\n",
    "paying_users = grouped_data['revenue'].apply(lambda x: (x > 0).sum())\n",
    "\n",
    "# Подсчет общего количества пользователей в каждой группе\n",
    "total_users = grouped_data['user_id'].nunique()\n",
    "\n",
    "# Подсчет ARPU в каждой группе\n",
    "arpu = grouped_data['revenue'].sum() / total_users\n",
    "\n",
    "# Подсчет ARPPU в каждой группе\n",
    "arppu = grouped_data['revenue'].sum() / paying_users\n",
    "\n",
    "# Вызов функции для бутстрэп-анализа ARPU между двумя группами\n",
    "booted_data_arpu = get_bootstrap(arpu.values[0].flatten(), arpu.values[1].flatten())\n",
    "\n",
    "# Вызов функции для бутстрэп-анализа ARPPU между двумя группами\n",
    "booted_data_arppu = get_bootstrap(arppu.values[0].flatten(), arppu.values[1].flatten())\n",
    "\n",
    "# Визуализация результатов для ARPU\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(booted_data_arpu['boot_data'], bins=30, color='skyblue', edgecolor='black', alpha=0.7)\n",
    "plt.axvline(booted_data_arpu['ci'][0], color='red', linestyle='--', label='Lower CI')\n",
    "plt.axvline(booted_data_arpu['ci'][1], color='red', linestyle='--', label='Upper CI')\n",
    "plt.xlabel('Разница в ARPU')\n",
    "plt.ylabel('Частота')\n",
    "plt.title('Бутстрэп-распределение различий в ARPU')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Визуализация результатов для ARPPU\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(booted_data_arppu['boot_data'], bins=30, color='skyblue', edgecolor='black', alpha=0.7)\n",
    "plt.axvline(booted_data_arppu['ci'][0], color='red', linestyle='--', label='Lower CI')\n",
    "plt.axvline(booted_data_arppu['ci'][1], color='red', linestyle='--', label='Upper CI')\n",
    "plt.xlabel('Разница в ARPPU')\n",
    "plt.ylabel('Частота')\n",
    "plt.title('Бутстрэп-распределение различий в ARPPU')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Вывод результатов для ARPU\n",
    "print(\"P-значение для ARPU:\", booted_data_arpu['p_value'])\n",
    "print(\"Доверительный интервал для ARPU:\", booted_data_arpu['ci'])\n",
    "\n",
    "# Вывод результатов для ARPPU\n",
    "print(\"P-значение для ARPPU:\", booted_data_arppu['p_value'])\n",
    "print(\"Доверительный интервал для ARPPU:\", booted_data_arppu['ci'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**<center>Результаты бутстрэп-анализа:<center>**\n",
    "    \n",
    "На основании полученных результатов можно сделать следующие выводы:\n",
    "1. Для ARPU:\n",
    "- P-значение равно 0.0, что означает, что различие в средних значениях ARPU между группами 'a' и 'b' статистически значимо.\n",
    "- Доверительный интервал для различия в ARPU составляет от -1.33756686  до -1.33756686.\n",
    "2. Для ARPPU:\n",
    "- P-значение также равно 0.0, что указывает на статистически значимое различие в средних значениях ARPPU между группами 'a' и 'b'.\n",
    "- Доверительный интервал для различия в ARPPU составляет от -339.65972776 до --339.65972776.\n",
    "\n",
    "Исходя из полученных результатов бутстрэп-анализа, мы можем отвергнуть нулевую гипотезу о равенстве средних значений ARPU и ARPPU между группами 'a' и 'b'. Это говорит о том, что средние значения ARPU и ARPPU действительно различаются между этими двумя группами данных."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Теперь проверим статистически ли значимо раличие Conversion Rate (у тестовой группы ниже чем у контрольной)? Так как переменная категориальная будем использовать Хи-квадрат. \n",
    "\n",
    "Нулевая гипотеза (H0): Conversion Rate в тестовой группе равен Conversion Rate в контрольной группе.\n",
    "Альтернативная гипотеза (H1): Conversion Rate в тестовой группе ниже, чем Conversion Rate в контрольной группе."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Хи-квадрат статистика: 4.374729521260405\n",
      "P-значение: 0.03647561892312613\n",
      "Степени свободы: 1\n",
      "Ожидаемые частоты:\n",
      "[[  1863.89924896 200239.10075104]\n",
      " [  1869.10075104 200797.89924896]]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from scipy.stats import chi2_contingency\n",
    "\n",
    "# Создание таблицы сопряженности\n",
    "observed = pd.DataFrame({'testgroup': ['a', 'b'], 'success': [paying_users.loc['a'], paying_users.loc['b']], 'failure': [total_users.loc['a'] - paying_users.loc['a'], total_users.loc['b'] - paying_users.loc['b']]})\n",
    "observed.set_index('testgroup', inplace=True)\n",
    "\n",
    "# Проведение хи-квадрат теста\n",
    "chi2, p, dof, expected = chi2_contingency(observed)\n",
    "\n",
    "# Вывод результатов теста\n",
    "print(\"Хи-квадрат статистика:\", chi2)\n",
    "print(\"P-значение:\", p)\n",
    "print(\"Степени свободы:\", dof)\n",
    "print(\"Ожидаемые частоты:\")\n",
    "print(expected)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**<center>Результаты хи-квадрат теста:<center>**\n",
    "    \n",
    "- P-значение (0.036) меньше уровня значимости 0.05, что означает, что у нас есть статистически значимые различия между Conversion Rate в тестовой и контрольной группах.\n",
    "- Так как P-значение меньше уровня значимости, мы отвергаем нулевую гипотезу в пользу альтернативной гипотезы.\n",
    "    \n",
    "Следовательно, на основе результатов хи-квадрат теста, мы можем сделать вывод, что Conversion Rate в тестовой группе действительно ниже, чем в контрольной группе, и это различие является статистически значимым."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**<center>Какой набор предложений можно считать лучшим?<center>**\n",
    "    \n",
    "Проблематично определить, какой набор предложений лучше, используя только представленные данные. Исходя из анализа метрик и проведенного бутстрэп-анализа, можно сделать вывод, что группа \"b\" имеет более высокие показатели ARPU, ARPPU (различия статистически значимы), что может указывать на более успешные результаты в плане доходности (средний доход с одного пользователя; средний доход с одного платящего пользователя). Однако, группа \"a\" имеет более высокий Conversion Rate, что может говорить о более эффективной конверсии пользователей, что так же подтверждается результатами хи-квадрат теста (различия статистически значимы)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <center>Задание 3<center>\n",
    "                                                \n",
    "**<center>В игре Plants & Gardens каждый месяц проводятся тематические события, ограниченные по времени. В них игроки могут получить уникальные предметы для сада и персонажей, дополнительные монеты или бонусы. Для получения награды требуется пройти ряд уровней за определенное время. С помощью каких метрик можно оценить результаты последнего прошедшего события?<center>**\n",
    "**<center>Предположим, в другом событии мы усложнили механику событий так, что при каждой неудачной попытке выполнения уровня игрок будет откатываться на несколько уровней назад. Изменится ли набор метрик оценки результата? Если да, то как?<center>**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для оценки результатов прошедшего события в игре Plants & Gardens можно использовать следующие метрики:\n",
    "\n",
    "1. Retention Rate (коэффициент удержания) - процент игроков, которые участвовали в событии и вернулись в игру после его завершения. Это показатель активности, позволяющий оценить, насколько событие удерживает интерес игроков к игре.\n",
    "\n",
    "2. Среднее количество пройденных уровней за время события - позволяет оценить, насколько уровни были интересны игрокам и насколько успешно они справились с ними.\n",
    "\n",
    "3. Конверсия в прохождение всех уровней события - процент игроков, завершивших все уровни события. Это показатель эффективности механики событий.\n",
    "\n",
    "4. ARPU (средний доход с игрока) - метрика позволяет оценить, насколько игроки заинтересованы в участии в событии.\n",
    "\n",
    "Касательно изменения механики событий, при усложнении механики событий с откатом на несколько уровней назад при неудачной попытке, возможно, потребуется дополнительные метрики для оценки результатов:\n",
    "\n",
    "1. Churn Rate (коэффициент оттока) - процент игроков, покинувших игру после изменения механики событий. Это позволит оценить, насколько новая механика затрудняющая прохождение уровней повлияла на удержание игроков в игре.\n",
    "\n",
    "2. Время прохождения события - среднее время, за которое игроки проходили событие. Новая механика может привести к увеличению времени прохождения, к потере интереса игроками.\n",
    "\n",
    "3. Среднее количество откатов - среднее количество раз, которые игроки откатываются назад при неудачной попытке. Это позволит оценить сложность уровней в игре.\n",
    "\n",
    "Изменение механики событий может повлиять на выбор и важность определенных метрик. Например, при откатах на несколько уровней назад важно отслеживать Churn Rate и среднее количество откатов, чтобы понять, как новая механика влияет на удержание игроков и их удовлетворенность. Таким образом, набор метрик для оценки результатов событий может измениться в зависимости от изменений в игровой механике."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
